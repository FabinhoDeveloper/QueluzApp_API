generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model acompanhante {
  id_acompanhante     Int                   @id @default(autoincrement())
  nome                String                @db.VarChar(255)
  endereco            String                @db.VarChar(255)
  email               String                @db.VarChar(255)
  viagem_acompanhante viagem_acompanhante[]
}

model carro {
  id_carro                     Int           @id @default(autoincrement())
  tipo_carro_id_tipo_carro     Int?
  status_carro_id_status_carro Int?
  modelo                       String?       @db.VarChar(255)
  placa                        String?       @db.VarChar(25)
  capacidade                   Int?
  fabricante                   String        @db.VarChar(255)
  status_carro                 status_carro? @relation(fields: [status_carro_id_status_carro], references: [id_status_carro], onDelete: Cascade, onUpdate: Cascade)
  tipo_carro                   tipo_carro?   @relation(fields: [tipo_carro_id_tipo_carro], references: [id_tipo_carro], onDelete: Cascade, onUpdate: Cascade)
  viagem                       viagem[]
}

model categoria_mensagem {
  id_categoria_mensagem Int                  @id @default(autoincrement())
  nome                  String               @db.VarChar(45)
  mensagem_ouvidoria    mensagem_ouvidoria[]
}

model funcao {
  id_funcao          Int                  @id @default(autoincrement())
  nome               String               @db.VarChar(255)
  funcionario_funcao funcionario_funcao[]
}

model funcionario {
  id_funcionario     Int                  @id @default(autoincrement())
  usuario_id_usuario Int?                 @unique  
  matricula          Int?
  usuario            usuario?             @relation(fields: [usuario_id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: Cascade)
  viagem             viagem[]
  funcionario_funcao funcionario_funcao[]
}

model funcionario_funcao {
  funcionario_id_funcionario Int
  funcao_id_funcao           Int
  
  // Definir as relações
  funcionario funcionario @relation(fields: [funcionario_id_funcionario], references: [id_funcionario], onDelete: Cascade, onUpdate: Cascade)
  funcao      funcao      @relation(fields: [funcao_id_funcao], references: [id_funcao], onDelete: Cascade, onUpdate: Cascade)

  @@id([funcionario_id_funcionario, funcao_id_funcao])
}

model mensagem_ouvidoria {
  id_mensagem_ouvidoria                    Int                 @id @default(autoincrement())
  usuario_id_usuario                       Int?
  categoria_mensagem_id_categoria_mensagem Int?
  assunto                                  String?             @db.VarChar(255)
  nome_solicitante                         String?             @db.VarChar(255)
  email_solicitante                        String?             @db.VarChar(255)
  numero_protocolo                         String?             @db.Char(15)
  mensagem                                 String              @db.VarChar(255)
  data_envio                               DateTime?           @default(now()) @db.Timestamp(6)
  status_mensagem                          String?             @db.VarChar(255)
  categoria_mensagem                       categoria_mensagem? @relation(fields: [categoria_mensagem_id_categoria_mensagem], references: [id_categoria_mensagem], onDelete: Cascade, onUpdate: Cascade)
  usuario                                  usuario?            @relation(fields: [usuario_id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: Cascade)
}

model parada {
  id_parada                                Int                 @id @default(autoincrement())
  solicitante_viagem_id_solicitante_viagem Int?
  viagem_id_viagem                         Int?
  endereco                                 String              @db.VarChar(255)
  solicitante_viagem                       solicitante_viagem? @relation(fields: [solicitante_viagem_id_solicitante_viagem], references: [id_solicitante_viagem], onDelete: Cascade, onUpdate: Cascade)
  viagem                                   viagem?             @relation(fields: [viagem_id_viagem], references: [id_viagem], onDelete: Cascade, onUpdate: Cascade)
}

model solicitante_viagem {
  id_solicitante_viagem Int                   @id @default(autoincrement())
  nome_completo         String                @db.VarChar(255)
  telefone              String                @db.Char(11)
  endereco              String                @db.VarChar(255)
  email                 String                @db.VarChar(255)
  parada                parada[]
  viagem_acompanhante   viagem_acompanhante[]
}

model status_carro {
  id_status_carro Int     @id @default(autoincrement())
  status_carro    String  @db.VarChar(255)
  carro           carro[]
}

model status_mensagem {
  id_status_mensagem Int    @id @default(autoincrement())
  nome               String @db.VarChar(45)
}

model status_viagem {
  id_status_viagem Int              @id @default(autoincrement())
  status_viagem    String           @db.VarChar(255)
  viagem_usuario   viagem_usuario[]
}

model tipo_carro {
  id_tipo_carro Int     @id @default(autoincrement())
  nome          String  @db.VarChar(255)
  carro         carro[]
}

model usuario {
  id_usuario          Int                  @id @default(autoincrement())
  primeiro_nome       String               @db.VarChar(255)
  ultimo_nome         String               @db.VarChar(255)
  cpf                 String               @unique @db.Char(11)
  telefone            String               @unique @db.Char(11)
  email               String               @unique @db.VarChar(255)
  senha               String               @db.VarChar(255)
  endereco            String               @db.VarChar(255)
  telefone_confirmado Boolean?             @default(false)
  mensagem_ouvidoria  mensagem_ouvidoria[]
  funcionario         funcionario[]
  viagem_usuario      viagem_usuario[]
}

model viagem {
  id_viagem                  Int                   @id @default(autoincrement())
  funcionario_id_funcionario Int?
  carro_id_carro             Int?
  data_partida               DateTime              @db.Timestamp(6)
  parada                     parada[]
  carro                      carro?                @relation(fields: [carro_id_carro], references: [id_carro], onDelete: Cascade, onUpdate: Cascade)
  funcionario                funcionario?          @relation(fields: [funcionario_id_funcionario], references: [id_funcionario], onDelete: Cascade, onUpdate: Cascade)
  viagem_acompanhante        viagem_acompanhante[]
  viagem_usuario             viagem_usuario[]
}

model viagem_acompanhante {
  viagem_id_viagem                         Int
  acompanhante_id_acompanhante             Int
  solicitante_viagem_id_solicitante_viagem Int?
  acompanhante                             acompanhante        @relation(fields: [acompanhante_id_acompanhante], references: [id_acompanhante], onDelete: Cascade, onUpdate: Cascade)
  solicitante_viagem                       solicitante_viagem? @relation(fields: [solicitante_viagem_id_solicitante_viagem], references: [id_solicitante_viagem], onDelete: Cascade, onUpdate: Cascade)
  viagem                                   viagem              @relation(fields: [viagem_id_viagem], references: [id_viagem], onDelete: Cascade, onUpdate: Cascade)

  @@id([viagem_id_viagem, acompanhante_id_acompanhante])
}

model viagem_usuario {
  viagem_id_viagem               Int
  usuario_id_usuario             Int
  status_viagem_id_status_viagem Int?
  status_viagem                  status_viagem? @relation(fields: [status_viagem_id_status_viagem], references: [id_status_viagem], onDelete: Cascade, onUpdate: Cascade)
  usuario                        usuario        @relation(fields: [usuario_id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: Cascade)
  viagem                         viagem         @relation(fields: [viagem_id_viagem], references: [id_viagem], onDelete: Cascade, onUpdate: Cascade)

  @@id([viagem_id_viagem, usuario_id_usuario])
}
